name: Python CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:   # permet aussi de déclencher manuellement

jobs:
  build-test-docker:
    runs-on: [self-hosted, linux, x64]

    steps:
    # 1️⃣ Récupérer le code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2️⃣ Installer Python
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # 3️⃣ Installer les dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # 4️⃣ Linter (assoupli, ne bloque pas la CI)
    - name: Run lint
      run: |
        pip install flake8
        # On crée une config flake8 "light"
        echo "[flake8]" > .flake8
        echo "max-line-length = 120" >> .flake8
        echo "ignore = F401,E501" >> .flake8
        # On lance mais ça ne fera pas échouer le job
        flake8 . || true

    # 5️⃣ Lancer les tests unitaires (optionnel, ne casse pas si absent)
    - name: Run tests
      run: |
        pip install pytest
        if ls test_*.py 1> /dev/null 2>&1; then pytest || true; else echo "No tests found"; fi

    # 6️⃣ Construire l'image Docker
    - name: Build Docker image
      run: |
        docker build -t cryptoimage:latest .

    # 7️⃣ (Optionnel) Pousser l'image sur Docker Hub
    #- name: Push Docker image
    #  env:
    #    DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #    DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #  run: |
    #    echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
    #    docker tag cryptoimage:latest $DOCKER_USERNAME/cryptoimage:latest
    #    docker push $DOCKER_USERNAME/cryptoimage:latest
