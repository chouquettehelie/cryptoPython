name: Python CI/CD

on:
  push:
    branches: [ cryptoHttp ]   # ⚡ Utilise ta branche cryptoHttp
  pull_request:
    branches: [ cryptoHttp ]
  workflow_dispatch:   # lancement manuel possible

jobs:
  build-test-docker:
    runs-on: [self-hosted, linux, x64]

    steps:
    # 1️⃣ Récupérer le code
    - name: Checkout code
      uses: actions/checkout@v3

    # 2️⃣ Installer Python
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # 3️⃣ Installer les dépendances
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # 4️⃣ Linter (assoupli, ne bloque pas la CI)
    - name: Run lint
      run: |
        pip install flake8
        echo "[flake8]" > .flake8
        echo "max-line-length = 120" >> .flake8
        echo "ignore = F401,E501" >> .flake8
        flake8 . || true

    # 5️⃣ Lancer les tests unitaires (optionnel)
    - name: Run tests
      run: |
        pip install pytest
        if ls test_*.py 1> /dev/null 2>&1; then pytest || true; else echo "No tests found"; fi

    # 6️⃣ Vérifier que docker compose est dispo
    - name: Check docker compose version
      run: docker compose version

    # 7️⃣ Lancer docker compose (build + run en arrière-plan)
    - name: Start services with Docker Compose
      run: docker compose -f docker-compose.yaml up -d --build

    # 8️⃣ Vérifier que les conteneurs tournent
    - name: Check running containers
      run: docker ps -a

    # 9️⃣ (Optionnel) Stopper les conteneurs après les tests
    - name: Stop services
      if: always()
      run: docker compose -f docker-compose.yaml down


