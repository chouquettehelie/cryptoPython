name: Python CI/CD

on:
  push:
    branches: [ cryptoHttp ]   # ⚡ Branche utilisée
  pull_request:
    branches: [ cryptoHttp ]
  workflow_dispatch:   # lancement manuel

jobs:
  build-test-docker:
    runs-on: [self-hosted, linux, x64]

    steps:
    # ──────────────── 🔹 1️⃣ Checkout code 🔹 ────────────────
    - name: Checkout repository
      uses: actions/checkout@v3

    # ──────────────── 🔹 2️⃣ Setup Python 🔹 ────────────────
    - name: Setup Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # ──────────────── 🔹 3️⃣ Installer les dépendances Python 🔹 ────────────────
    - name: Install dependencies
      run: |
        echo "::group::Installing Python dependencies"
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        echo "::endgroup::"

    # ──────────────── 🔹 4️⃣ Linter (flake8) 🔹 ────────────────
    - name: Run lint
      run: |
        echo "::group::Linting with flake8"
        pip install flake8
        echo "[flake8]" > .flake8
        echo "max-line-length = 120" >> .flake8
        echo "ignore = F401,E501" >> .flake8
        flake8 . || true
        echo "::endgroup::"

    # ──────────────── 🔹 5️⃣ Tests unitaires 🔹 ────────────────
    - name: Run tests
      run: |
        echo "::group::Running pytest"
        pip install pytest
        if ls test_*.py 1> /dev/null 2>&1; then pytest || true; else echo "No tests found"; fi
        echo "::endgroup::"

    # ──────────────── 🔹 6️⃣ Vérifier docker compose 🔹 ────────────────
    - name: Check docker compose version
      run: |
        echo "::group::Checking Docker Compose version"
        docker compose version
        echo "::endgroup::"

    # ──────────────── 🔹 7️⃣ Build & run avec Docker Compose 🔹 ────────────────
    - name: Start services with Docker Compose
      run: |
        echo "::group::Starting Docker Compose services"
        docker compose -f docker-compose.yaml up -d --build
        echo "::endgroup::"

    # ──────────────── 🔹 8️⃣ Vérifier les conteneurs 🔹 ────────────────
    - name: Check running containers
      run: |
        echo "::group::Listing running containers"
        docker ps -a
        echo "::endgroup::"

    # ──────────────── 🔹 9️⃣ Healthcheck API (optionnel) 🔹 ────────────────
    - name: Healthcheck FastAPI
      run: |
        echo "::group::Checking API health"
        sleep 5  # laisse le temps au conteneur de démarrer
        curl -f http://localhost:8000/docs || (echo "API not responding" && exit 1)
        echo "::endgroup::"

    # ──────────────── 🔹 🔟 Stop services 🔹 ────────────────
    - name: Stop services
      if: always()
      run: |
        echo "::group::Stopping Docker Compose services"
        docker compose -f docker-compose.yaml down
        echo "::endgroup::"
