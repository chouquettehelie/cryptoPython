name: Python CI/CD

on:
  push:
    branches: [ cryptoHttp ]   # âš¡ Branche principale utilisÃ©e
  pull_request:
    branches: [ cryptoHttp ]
  workflow_dispatch:   # Permet de lancer manuellement

jobs:
  build-test-docker:
    runs-on: [self-hosted, linux, x64]

    steps:
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ PrÃ©paration du code ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Checkout repository
      uses: actions/checkout@v3

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ Setup Python ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Setup Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ DÃ©pendances Python ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Install dependencies
      run: |
        echo "::group::Installing Python dependencies"
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        echo "::endgroup::"

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ Analyse du code (Lint) ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Run lint (flake8)
      run: |
        echo "::group::Linting with flake8"
        pip install flake8
        echo "[flake8]" > .flake8
        echo "max-line-length = 120" >> .flake8
        echo "ignore = F401,E501" >> .flake8
        flake8 . || true
        echo "::endgroup::"

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ Tests unitaires ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Run tests
      run: |
        echo "::group::Running pytest"
        pip install pytest
        if ls test_*.py 1> /dev/null 2>&1; then pytest || true; else echo "No tests found"; fi
        echo "::endgroup::"

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ Docker Build & Run ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Check Docker Compose version
      run: docker compose version

    - name: Start services with Docker Compose
      run: |
        echo "::group::Starting Docker Compose services"
        docker compose -f docker-compose.yaml up -d --build
        echo "::endgroup::"

    - name: List running containers
      run: docker ps -a

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ Healthcheck API ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Healthcheck FastAPI
      run: |
        echo "::group::Checking API health"
        sleep 5  # laisse le temps au conteneur de dÃ©marrer
        curl -f http://localhost:8000/docs || (echo "API not responding" && exit 1)
        echo "::endgroup::"

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ ðŸ”¹ Nettoyage ðŸ”¹ â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    - name: Stop services
      if: always()
      run: |
        echo "::group::Stopping Docker Compose services"
        docker compose -f docker-compose.yaml down
        echo "::endgroup::"

